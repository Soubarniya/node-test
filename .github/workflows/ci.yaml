name: Node.js CI/CD Workflow

on:
  push:
    branches:
      - main
      - devops
#commented
  pull_request:
    branches:
      - development
  
jobs:
  Code-Build:
    runs-on: ubuntu-latest

    steps:

      - name: Check out code
        uses: actions/checkout@v4


      - name: List files
        run: ls -al
      
      # Step 2: Set up Node.js with caching for dependencies
      - name: Set up Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Step 3: Install dependencies and build codes
      - name: Install dependencies
        run: npm install
      
      # - name: Create build directory
      #   run: mkdir build
  
      # - name: Package app
      #   run: |
      #     rsync -av --progress . ./build --exclude build
      #     zip -r build/nodejs-app.zip build/
  
      # - name: Upload build artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: nodejs-app
      #     path: build/nodejs-app.zip

      - name: Build code
        run: npm run 

  Docker-Build-Push:
    runs-on: ubuntu-latest
    needs: Code-Build

    steps:  
      - name: Check out code
        uses: actions/checkout@v4
      
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Read version from VERSION file
        id: read_version
        run: |
          # Read the entire content of the VERSION file and trim any surrounding whitespace
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version extracted: $VERSION"

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: soubarniya/mynode
      #     cache-from: type=registry,ref=soubarniya/mynode:buildcache
      #     cache-to: type=registry,ref=soubarniya/mynode:buildcache,mode=max
      - name: Build Docker image with extracted version
        run: |
          docker build -t soubarniya/mynode:${{ env.VERSION }} .
          docker images

      - name: Push Docker image with extracted version
        if: github.ref == 'refs/heads/main'
        run: |

          docker push soubarniya/mynode:${{ env.VERSION }}

  K8s-Manifest-Update:
    runs-on: ubuntu-latest
    needs: Docker-Build-Push
    # if: github.ref == 'refs/heads/main' # Only run this job if the branch is main

    steps: 
      - name: Check out code
        uses: actions/checkout@v4
      - name: Read version from VERSION file
        id: read_version
        run: |
          # Read the entire content of the VERSION file and trim any surrounding whitespace
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version extracted: $VERSION"
      - name: Check for docker image
        run: |
          docker pull soubarniya/mynode:${{ env.VERSION }}
          docker images
      - name: Update Kubernetes manifest
        run: |
          pwd
          ls -la
          git clone https://github.com/Soubarniya/argocd.git
          ls -la
          cd argocd
          ls -la
          # Create a new branch with a unique name (e.g., "update-node-version-${{ env.VERSION }}")
          git checkout -b node-version-${{ env.VERSION }}
          sed -i "s|image: soubarniya/mynode:.*|image: soubarniya/mynode:${{ env.VERSION }}|" node.yaml
          git status
          git diff
          cat node.yaml
          # Configure Git
          # git init .
          git config --global user.email "leosphere2001@gmail.com"
          git config --global user.name "Soubarniya"
          
          # Commit and push changes if thereâ€™s an update
          if git diff --exit-code --quiet; then
            echo "No changes to commit."
          else
            git add node.yaml
            git commit -m "Updated node.yaml with version ${{ env.VERSION }} | GitHub Actions Pipeline"
            git pull origin node-version-${{ env.VERSION }} --no-rebase || echo "Branch doesn't exist remotely, continuing."

            # git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN}}@github.com/Soubarniya/argocd.git
            git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN}}@github.com/Soubarniya/argocd.git node-version-${{ env.VERSION }}
          fi

