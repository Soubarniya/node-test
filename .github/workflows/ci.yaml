name: CI/CD Workflow
#testing worflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      name:
        description: 'sou'
        required: true
        default: 'hi'
      home:
        description: 'mumbai'
        required: true
        default: 'india'

jobs:
  checkout:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Print Inputs
        run: |
          echo "Name: ${{ github.event.inputs.name }}"
          echo "Home: ${{ github.event.inputs.home }}"

      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js with caching for dependencies
      - name: Set up Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Step 3: Install dependencies and build code
      - name: Install dependencies
        run: npm install

      - name: Build code
        run: npm run build
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
  Build:
    runs-on: ubuntu-latest
      # Step 4: Save the build output as an artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/  # Replace 'dist/' with the correct output directory

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 5: Log in to Docker Hub (or other registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
          
      - name: Read version from VERSION file
        id: read_version
        run: |
          # Read the entire content of the VERSION file and trim any surrounding whitespace
          VERSION=$(cat VERSION | xargs)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version extracted: $VERSION"

      # Step 6: Build the Docker image
      - name: Build Docker image with extracted version
        run: |
          docker build -t soubarniya/mynode:${{ env.VERSION }} .
          docker push soubarniya/mynode:${{ env.VERSION }}

      - name: Update Kubernetes manifest
        run: |
          pwd
          ls -la
          git clone https://github.com/Soubarniya/argocd.git
          ls -la
          cd argocd
          ls -la
          sed -i "s|image: soubarniya/mynode:.*|image: soubarniya/mynode:${{ env.VERSION }}|" node.yaml
          git status
          git diff
          cat node.yaml
          # Configure Git
          # git init .
          git config --global user.email "leosphere2001@gmail.com"
          git config --global user.name "Soubarniya"
          
          # Commit and push changes if there’s an update
          if git diff --exit-code --quiet; then
            echo "No changes to commit."
          else
            git add node.yaml
            git commit -m "Updated node.yaml with version ${{ env.VERSION }} | GitHub Actions Pipeline"
            git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN}}@github.com/Soubarniya/argocd.git
          fi